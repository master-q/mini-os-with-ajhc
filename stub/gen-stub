#!/usr/bin/env ruby
require 'pp'
require 'fileutils'
require 'erb'

TypeMap =  {
  'uint8_t' => 'Word8',
  'uint16_t' => 'Word16',
  'uint32_t' => 'Word32',
  'uint64_t' => 'Word64',
  'uint64_t*' => '(Ptr Word64)',
  'int16_t' => 'Int16',
  'int64_t' => 'Int64',
  'int' => 'Int32',
  'int8_t' => 'Int8',
  'int16_t' => 'Int16',
  'int32_t' => 'Int32',
  'time_t' => 'Int64',
  'long' => 'Int32',
  'char*' => 'CString',
  'void*' => '(Ptr Word8)',
  'char[]' => 'CString',
  'domid_t' => 'Word16',
  'grant_ref_t' => 'Word32',
  'evtchn_port_t' => 'Word32',
  '__guest_handle_ulong' => '(Ptr Word8)'
}
CTypeMap = {
  '__guest_handle_ulong' => 'unsigned long'
}
Keywords = %w(in type)

def each(xs, &f)
  first = true
  xs.each do|x|
    f.call(first, *x)
    first = false
  end
end

def haskell(str)
  name = str.split('_').map(&:capitalize).join('')
  if Keywords.include? name.downcase then
    "#{name}_"
  else
    name
  end
end

def snake(str)
  str[0].downcase + str[1..-1]
end

def c_type(ty)
  case ty.first
  when :prim
    t = ty[1].gsub(/\[\]$/,'*')
    if CTypeMap.key? t then
      CTypeMap[t]
    else
      t
    end
  when :struct
    t = "struct #{ty[1]}"
    ty[2].times { t += '*' }
    t
  end
end

def haskell_type(ty)
  case ty.first
  when :prim
    TypeMap[ty[1]]
  when :struct
    t = haskell ty[1]
    ty[2].times {
      t  = "(Ptr #{t})"
    }
    t
  end
rescue => e
  p [e,ty]
  raise e
end

def read(content)
  map = {}
  current = nil
  content.each do|line|
    case line
    when /struct (\w+) {/
      current = $1
      map[current] = []
    when /\s*struct\s+(\w+)(\*+)\s+(\w+)/
      map[current] << [[:struct,$1, $2.size], $3]
    when /\s*([\w*\[\]]+)\s+(\w+)/
      map[current] << [[:prim, $1], $2]
    end
  end
  pp map
  map
end

def c_stub(io, map)
  map.each do|struct, fields|
    io.puts <<-END
struct #{struct}* hs_new_#{struct}(void) {
  struct #{struct}* p = (struct #{struct}*)malloc(sizeof(struct #{struct}));
  memset(p, 0, sizeof(struct #{struct}));
  return p;
}

    END

    fields.each do|type, name|
      io.puts <<-END
#{c_type type} hs_get_#{struct}_#{name}(struct #{struct}* p) {
  return p->#{name};
}
      END

      if type[1] !~ /\[\]$/ then
        io.puts <<-END
void hs_set_#{struct}_#{name}(struct #{struct}* p, #{c_type type} value) {
  p->#{name} = value;
}
        END
      end
    end
  end
end

def haskell_stub(io, mod_name, map)
  io.puts ERB.new(File.read(File.dirname(__FILE__) + "/templates/haskell.erb")).result(binding)
end

def ffi_stub(io, mod_name, map)
  io.puts ERB.new(File.read(File.dirname(__FILE__) + "/templates/ffi_c.erb")).result(binding)
end

ARGV.each do|path|
  map = read File.open(path)
  mod_name = File.basename(path, ".h")
  FileUtils.mkdir_p 'stub'
  File.open('stub/' + mod_name  + "_c_stub.h", "w+") {|io|
    c_stub(io, map)
  }
  File.open('stub/' + mod_name + '_ffi_stub.h', 'w+') {|io|
    ffi_stub(io, mod_name, map)
  }
  File.open('stub/' + haskell(mod_name)  + "Stub.hs", "w+") {|io|
    haskell_stub(io, mod_name, map)
  }
end
